{"ast":null,"code":"var _jsxFileName = \"C:\\\\prize-calc\\\\src\\\\prizestakingcalculator.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport { Slider } from \"@/components/ui/slider\";\nimport { Input } from \"@/components/ui/input\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function PrizeStakingCalculator() {\n  _s();\n  const [totalStaked, setTotalStaked] = useState(700000000);\n  const [userStake, setUserStake] = useState(10000);\n  const [industryPercent, setIndustryPercent] = useState(10);\n  const [tokenPrice, setTokenPrice] = useState(0.01);\n  const INDUSTRY_TOTAL = 400000000000;\n  const BUSINESS_CUT = 0.03;\n  const MAX_REVENUE = INDUSTRY_TOTAL * BUSINESS_CUT; // $12 B\n  const COMPOUNDS_PER_YEAR = 365;\n\n  // 1) Pool + share\n  const yieldPoolUSD = industryPercent / 100 * MAX_REVENUE;\n  const shareFraction = userStake / totalStaked;\n  const annualRevenueUSD = shareFraction * yieldPoolUSD;\n\n  // 2) USD invested\n  const initialValueUSD = userStake * tokenPrice;\n\n  // 3) APR decimal (fractional)\n  const aprDecimal = annualRevenueUSD / initialValueUSD / 100;\n\n  // 4) Daily rate and APY\n  const dailyRate = aprDecimal / COMPOUNDS_PER_YEAR;\n  const apyFraction = Math.pow(1 + dailyRate, COMPOUNDS_PER_YEAR) - 1;\n\n  // 5) APY% (multiplier here determines your final scale)\n  //    Try 100, 1000, 10000 and see what console prints for apyPercent.\n  const apyPercent = apyFraction * 10000;\n\n  // Log everything on each render\n  useEffect(() => {\n    console.log({\n      yieldPoolUSD,\n      shareFraction,\n      annualRevenueUSD,\n      initialValueUSD,\n      aprDecimal,\n      dailyRate,\n      apyFraction,\n      apyPercent\n    });\n  }, [totalStaked, userStake, industryPercent, tokenPrice]);\n  const fmt = n => n.toLocaleString(undefined, {\n    maximumFractionDigits: 2\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"mx-auto p-6\",\n    style: {\n      maxWidth: '1200px',\n      fontFamily: 'Chelsea Market',\n      color: 'black'\n    },\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n        children: \"APY (%):\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [fmt(apyPercent), \"%\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 52,\n    columnNumber: 5\n  }, this);\n}\n_s(PrizeStakingCalculator, \"93VP9x92Fb5vVATVQepjlI+PTP4=\");\n_c = PrizeStakingCalculator;\nvar _c;\n$RefreshReg$(_c, \"PrizeStakingCalculator\");","map":{"version":3,"names":["React","useState","useEffect","Slider","Input","jsxDEV","_jsxDEV","PrizeStakingCalculator","_s","totalStaked","setTotalStaked","userStake","setUserStake","industryPercent","setIndustryPercent","tokenPrice","setTokenPrice","INDUSTRY_TOTAL","BUSINESS_CUT","MAX_REVENUE","COMPOUNDS_PER_YEAR","yieldPoolUSD","shareFraction","annualRevenueUSD","initialValueUSD","aprDecimal","dailyRate","apyFraction","Math","pow","apyPercent","console","log","fmt","n","toLocaleString","undefined","maximumFractionDigits","className","style","maxWidth","fontFamily","color","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/prize-calc/src/prizestakingcalculator.jsx"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport { Slider } from \"@/components/ui/slider\";\r\nimport { Input } from \"@/components/ui/input\";\r\n\r\nexport default function PrizeStakingCalculator() {\r\n  const [totalStaked, setTotalStaked]         = useState(700_000_000);\r\n  const [userStake, setUserStake]             = useState(10000);\r\n  const [industryPercent, setIndustryPercent] = useState(10);\r\n  const [tokenPrice, setTokenPrice]           = useState(0.01);\r\n\r\n  const INDUSTRY_TOTAL     = 400_000_000_000;\r\n  const BUSINESS_CUT       = 0.03;\r\n  const MAX_REVENUE        = INDUSTRY_TOTAL * BUSINESS_CUT; // $12 B\r\n  const COMPOUNDS_PER_YEAR = 365;\r\n\r\n  // 1) Pool + share\r\n  const yieldPoolUSD     = (industryPercent/100) * MAX_REVENUE;\r\n  const shareFraction    = userStake / totalStaked;\r\n  const annualRevenueUSD = shareFraction * yieldPoolUSD;\r\n\r\n  // 2) USD invested\r\n  const initialValueUSD = userStake * tokenPrice;\r\n\r\n  // 3) APR decimal (fractional)\r\n  const aprDecimal = (annualRevenueUSD / initialValueUSD) / 100;\r\n\r\n  // 4) Daily rate and APY\r\n  const dailyRate   = aprDecimal / COMPOUNDS_PER_YEAR;\r\n  const apyFraction = Math.pow(1 + dailyRate, COMPOUNDS_PER_YEAR) - 1;\r\n\r\n  // 5) APY% (multiplier here determines your final scale)\r\n  //    Try 100, 1000, 10000 and see what console prints for apyPercent.\r\n  const apyPercent = apyFraction * 10000;  \r\n\r\n  // Log everything on each render\r\n  useEffect(() => {\r\n    console.log({\r\n      yieldPoolUSD,\r\n      shareFraction,\r\n      annualRevenueUSD,\r\n      initialValueUSD,\r\n      aprDecimal,\r\n      dailyRate,\r\n      apyFraction,\r\n      apyPercent,\r\n    });\r\n  }, [totalStaked, userStake, industryPercent, tokenPrice]);\r\n\r\n  const fmt = n => n.toLocaleString(undefined, { maximumFractionDigits: 2 });\r\n\r\n  return (\r\n    <div className=\"mx-auto p-6\" style={{ maxWidth: '1200px', fontFamily: 'Chelsea Market', color: 'black' }}>\r\n      {/* ...rest of your JSX unchanged... */}\r\n      <div>\r\n        <strong>APY (%):</strong>\r\n        <div>{fmt(apyPercent)}%</div>\r\n      </div>\r\n      {/* ... */}\r\n    </div>\r\n  );\r\n}\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,SAASC,MAAM,QAAQ,wBAAwB;AAC/C,SAASC,KAAK,QAAQ,uBAAuB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE9C,eAAe,SAASC,sBAAsBA,CAAA,EAAG;EAAAC,EAAA;EAC/C,MAAM,CAACC,WAAW,EAAEC,cAAc,CAAC,GAAWT,QAAQ,CAAC,SAAW,CAAC;EACnE,MAAM,CAACU,SAAS,EAAEC,YAAY,CAAC,GAAeX,QAAQ,CAAC,KAAK,CAAC;EAC7D,MAAM,CAACY,eAAe,EAAEC,kBAAkB,CAAC,GAAGb,QAAQ,CAAC,EAAE,CAAC;EAC1D,MAAM,CAACc,UAAU,EAAEC,aAAa,CAAC,GAAaf,QAAQ,CAAC,IAAI,CAAC;EAE5D,MAAMgB,cAAc,GAAO,YAAe;EAC1C,MAAMC,YAAY,GAAS,IAAI;EAC/B,MAAMC,WAAW,GAAUF,cAAc,GAAGC,YAAY,CAAC,CAAC;EAC1D,MAAME,kBAAkB,GAAG,GAAG;;EAE9B;EACA,MAAMC,YAAY,GAAQR,eAAe,GAAC,GAAG,GAAIM,WAAW;EAC5D,MAAMG,aAAa,GAAMX,SAAS,GAAGF,WAAW;EAChD,MAAMc,gBAAgB,GAAGD,aAAa,GAAGD,YAAY;;EAErD;EACA,MAAMG,eAAe,GAAGb,SAAS,GAAGI,UAAU;;EAE9C;EACA,MAAMU,UAAU,GAAIF,gBAAgB,GAAGC,eAAe,GAAI,GAAG;;EAE7D;EACA,MAAME,SAAS,GAAKD,UAAU,GAAGL,kBAAkB;EACnD,MAAMO,WAAW,GAAGC,IAAI,CAACC,GAAG,CAAC,CAAC,GAAGH,SAAS,EAAEN,kBAAkB,CAAC,GAAG,CAAC;;EAEnE;EACA;EACA,MAAMU,UAAU,GAAGH,WAAW,GAAG,KAAK;;EAEtC;EACAzB,SAAS,CAAC,MAAM;IACd6B,OAAO,CAACC,GAAG,CAAC;MACVX,YAAY;MACZC,aAAa;MACbC,gBAAgB;MAChBC,eAAe;MACfC,UAAU;MACVC,SAAS;MACTC,WAAW;MACXG;IACF,CAAC,CAAC;EACJ,CAAC,EAAE,CAACrB,WAAW,EAAEE,SAAS,EAAEE,eAAe,EAAEE,UAAU,CAAC,CAAC;EAEzD,MAAMkB,GAAG,GAAGC,CAAC,IAAIA,CAAC,CAACC,cAAc,CAACC,SAAS,EAAE;IAAEC,qBAAqB,EAAE;EAAE,CAAC,CAAC;EAE1E,oBACE/B,OAAA;IAAKgC,SAAS,EAAC,aAAa;IAACC,KAAK,EAAE;MAAEC,QAAQ,EAAE,QAAQ;MAAEC,UAAU,EAAE,gBAAgB;MAAEC,KAAK,EAAE;IAAQ,CAAE;IAAAC,QAAA,eAEvGrC,OAAA;MAAAqC,QAAA,gBACErC,OAAA;QAAAqC,QAAA,EAAQ;MAAQ;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC,eACzBzC,OAAA;QAAAqC,QAAA,GAAMV,GAAG,CAACH,UAAU,CAAC,EAAC,GAAC;MAAA;QAAAc,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAK,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC1B;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAEH,CAAC;AAEV;AAACvC,EAAA,CAxDuBD,sBAAsB;AAAAyC,EAAA,GAAtBzC,sBAAsB;AAAA,IAAAyC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}